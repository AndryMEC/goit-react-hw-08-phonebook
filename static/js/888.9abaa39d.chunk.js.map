{"version":3,"file":"static/js/888.9abaa39d.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/App.styled.js","Pages/PhoneBook/PhoneBook.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const FormContact = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  margin: 0 auto;\n  align-items: center;\n  gap: 10px;\n  width: 300px;\n  border: 1px solid black;\n  border-radius: 15px;\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 0;\n  margin: 0;\n  width: 250px;\n  font-size: 24px;\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  width: 250px;\n  font-size: 16px;\n  \n`;\n\nexport const ErrMessage = styled(ErrorMessage)`\n  max-width: 250px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: transparent;\n  padding: 10px;\n  border-radius: 15px;\n  border: 1px solid green;\n  cursor: pointer;\n  transition: background-color 300ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: lightgreen;\n    color: #000;\n    font-weight: 600;\n  }\n`;","export const getContacts = state => state.contacts.contacts;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;","import PropTypes from 'prop-types';\nimport {\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n  FormContact,\n} from './ContactForm.styled';\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const nameID = nanoid();\n  const numberID = nanoid();\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required(),\n    number: yup\n      .string()\n      .matches(\n        '^[+]?[(]?[0-9]{1,4}[)]?[-s.]?[0-9]{1,4}[-s.]?[0-9]{1,6}$',\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required(),\n  });\n\n  const handlerFormSubmit = ({ name, number }, actions) => {\n    const nameNormalized = name.toLowerCase();\n\n    const isNameAlreadyInContacts = contacts.find(\n      contact => contact.name.toLowerCase() === nameNormalized\n    );\n\n    if (isNameAlreadyInContacts) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    actions.resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handlerFormSubmit}\n    >\n      <FormContact autoComplete=\"off\">\n        <FormInputLabel htmlFor={nameID}>Name</FormInputLabel>\n        <FormInput type=\"text\" name=\"name\" id={nameID} />\n        <ErrMessage name=\"name\" component=\"div\" />\n\n        <FormInputLabel htmlFor={numberID}>Number</FormInputLabel>\n        <FormInput type=\"text\" name=\"number\" id={numberID} />\n        <ErrMessage name=\"number\" component=\"div\" />\n\n        <SubmitButton type=\"submit\">Add contact</SubmitButton>\n      </FormContact>\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default ContactForm;","import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-self: center;\n  gap: 25px;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const ConctactListItem = styled.li`\n  display: flex;\n  gap: 10px;\n  justify-content: right;\n\n  font-size: 20px;\n`;\n\nexport const DeleteButton = styled.button`\n  cursor: pointer;\n  padding: 5px 10px;\n  border-radius: 15px;\n  border: none;\n  background-color: lightgreen;\n  transition: background-color 250ms linear;\n  &:hover,\n  &:focus {\n    color: #000;\n    background-color: red;\n    font-weight: 600;\n  }\n`;","import PropTypes from 'prop-types';\nimport {\n  ContactsList,\n  ConctactListItem,\n  DeleteButton,\n} from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filtered = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = (() => {\n    const normalizedFilter = filtered.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  })();\n\n  return (\n    <>\n      <ContactsList>\n        {filteredContacts.map(contact => (\n          <ConctactListItem key={contact.id}>\n            {contact.name}: {contact.number}\n            <DeleteButton\n              type=\"button\"\n              onClick={() => {\n                dispatch(deleteContact(contact.id));\n              }}\n            >\n              Delete\n            </DeleteButton>\n          </ConctactListItem>\n        ))}\n      </ContactsList>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  deleteContact: PropTypes.func,\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const Filter = styled.div`\n  width: 350px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 auto;\n  margin-bottom: 25px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 250px;\n  font-size: 24px;\n`;\n\nexport const FilterLabel = styled.label`\n  padding: 5px;\n  text-align: center;\n  width: 250px;\n  font-size: 24px;\n`;","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { Filter, FilterInput, FilterLabel } from './Filter.styled';\nimport { filter } from 'redux/contacts/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst FilterName = () => {\n  const filterId = nanoid();\n\n  const filtered = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    dispatch(filter(e.currentTarget.value));\n  };\n\n  return (\n    <Filter>\n      <FilterLabel htmlFor={filterId}>Find contacts by name</FilterLabel>\n      <FilterInput\n        autoComplete=\"off\"\n        type=\"text\"\n        id={filterId}\n        name=\"filter\"\n        value={filtered}\n        onChange={handleFilterChange}\n      ></FilterInput>\n    </Filter>\n  );\n};\n\nFilter.propTypes = {\n  filterValue: PropTypes.string,\n  handleFilterChange: PropTypes.func,\n};\n\nexport default FilterName;","import styled from '@emotion/styled';\n\nexport const Phonebook = styled.div`\ndisplay: flex;\nflex-direction: column;\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nexport const PhonebookTitle = styled.h1`\n  font-size: 38px;\n  font-weight: 700;\n  text-align: center;\n`;\n\nexport const PhonebookSubTitle = styled.h2`\n  font-size: 32px;\n  font-weight: 700;\n  text-align: center;\n`;","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport FilterName from 'components/Filter/Filter';\nimport {\n  Phonebook,\n  PhonebookTitle,\n  PhonebookSubTitle,\n} from '../../components/App.styled';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getContacts, getError, getIsLoading } from 'redux/contacts/selectors';\n\nconst PhoneBook = () => {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <Phonebook>\n      <PhonebookTitle>PhoneBook</PhonebookTitle>\n      <ContactForm />\n      <PhonebookSubTitle>Contacts</PhonebookSubTitle>\n      {contacts.length === 0 && !error && !isLoading && (\n        <b style={{ display: 'flex', justifyContent: 'center', color: 'red' }}>\n          You don't have any contact yet\n        </b>\n      )}\n      {contacts.length !== 0 && <FilterName />}\n\n      {isLoading && !error && (\n        <b style={{ display: 'flex', justifyContent: 'center' }}>\n          Request in progress...\n        </b>\n      )}\n      <ContactList />\n      {error && (\n        <span\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            fontStyle: 'italic',\n          }}\n        >\n          Oops, something went wrong. Please try again!\n        </span>\n      )}\n    </Phonebook>\n  );\n};\n\nexport default PhoneBook;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["FormContact","styled","Form","FormInput","Field","FormInputLabel","ErrMessage","ErrorMessage","SubmitButton","getContacts","state","contacts","getIsLoading","isLoading","getError","error","getFilter","filter","nameID","nanoid","numberID","useSelector","dispatch","useDispatch","validationSchema","yup","shape","name","matches","required","number","initialValues","onSubmit","actions","nameNormalized","toLowerCase","find","contact","alert","addContact","resetForm","autoComplete","htmlFor","type","id","component","ContactsList","ConctactListItem","DeleteButton","filtered","filteredContacts","normalizedFilter","includes","map","onClick","deleteContact","Filter","FilterInput","FilterLabel","propTypes","filterValue","PropTypes","handleFilterChange","filterId","value","onChange","e","currentTarget","Phonebook","PhonebookTitle","PhonebookSubTitle","useEffect","fetchContacts","length","style","display","justifyContent","color","fontStyle","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","exact","checkPropTypes"],"sourceRoot":""}