{"version":3,"file":"static/js/431.fe7c7ff8.chunk.js","mappings":"uQAGaA,GAAcC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,qNAYXE,GAAYF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,0FAOTI,EAAiBJ,EAAAA,EAAAA,MAAH,0FAOdK,GAAaL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,4DAKVO,EAAeP,EAAAA,EAAAA,OAAH,8S,SCyDzB,EA5EqB,WACnB,IAAMQ,GAASC,EAAAA,EAAAA,MACTC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MACbG,GAAWC,EAAAA,EAAAA,MAQXC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,SAAS,YACZC,MAAOL,EAAAA,KAAaK,MAAM,yBAAyBD,SAAS,YAC5DE,SAAUN,EAAAA,KAEPO,IAAI,EAAG,iCACPH,SAAS,uBAkBd,OACE,SAAC,KAAD,CACEI,cAtCkB,CACpBN,KAAM,GACNG,MAAO,GACPC,SAAU,IAoCRP,iBAAkBA,EAClBU,SAnBsB,SAAC,EAA2BC,GAAa,IAAtCR,EAAqC,EAArCA,KAAMG,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAWxCT,GAASc,EAAAA,EAAAA,IAAW,CAAET,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KACnCI,EAAQE,WACT,EAGC,UAKE,UAAC5B,EAAD,CAAa6B,aAAa,MAA1B,WACE,SAACxB,EAAD,CAAgByB,QAASrB,EAAzB,SAAiC,UACjC,SAACN,EAAD,CAAW4B,KAAK,OAAOb,KAAK,OAAOc,GAAIvB,KACvC,SAACH,EAAD,CAAYY,KAAK,OAAOe,UAAU,SAElC,SAAC5B,EAAD,CAAgByB,QAASnB,EAAzB,SAAkC,WAClC,SAACR,EAAD,CAAW4B,KAAK,QAAQb,KAAK,QAAQc,GAAIrB,KACzC,SAACL,EAAD,CAAYY,KAAK,QAAQe,UAAU,SAEnC,SAAC5B,EAAD,CAAgByB,QAASlB,EAAzB,SAAqC,cACrC,SAACT,EAAD,CACE4B,KAAK,WACLb,KAAK,WACLc,GAAIpB,EACJiB,aAAa,WAEf,SAACvB,EAAD,CAAYY,KAAK,WAAWe,UAAU,SAEtC,SAACzB,EAAD,CAAcuB,KAAK,SAAnB,SAA4B,iBAInC,EC7ED,EANiB,WACf,OACE,SAAC,EAAD,GAEH,C","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","Pages/Register/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\n\nexport const FormContact = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  margin: 0 auto;\n  align-items: center;\n  gap: 10px;\n  width: 300px;\n  border: 1px solid black;\n  border-radius: 15px;\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 0;\n  margin: 0;\n  width: 250px;\n  font-size: 24px;\n`;\n\nexport const FormInputLabel = styled.label`\n  padding: 0;\n  margin: 0;\n  width: 250px;\n  font-size: 16px;\n`;\n\nexport const ErrMessage = styled(ErrorMessage)`\n  max-width: 250px;\n  color: red;\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: transparent;\n  padding: 10px;\n  border-radius: 15px;\n  border: 1px solid green;\n  cursor: pointer;\n  transition: background-color 300ms linear;\n\n  &:hover,\n  &:focus {\n    background-color: lightgreen;\n    color: #000;\n    font-weight: 600;\n  }\n`;","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport * as yup from 'yup';\n\nimport { signupUser } from 'redux/auth/operationsWithUser';\n\nimport {\n  FormInput,\n  FormInputLabel,\n  SubmitButton,\n  ErrMessage,\n  FormContact,\n} from './RegisterForm.styled';\nconst RegisterForm = () => {\n  const nameID = nanoid();\n  const emailID = nanoid();\n  const passwordID = nanoid();\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .matches(\n        \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Required'),\n    email: yup.string().email('Invalid email address').required('Required'),\n    password: yup\n      .string()\n      .min(7, 'Must be at least 7 characters')\n      .required('Field is required'),\n  });\n\n  const handlerFormSubmit = ({ name, email, password }, actions) => {\n    // const nameNormalized = name.toLowerCase();\n\n    // const isNameAlreadyInContacts = contacts.find(\n    //   contact => contact.name.toLowerCase() === nameNormalized\n    // );\n\n    // if (isNameAlreadyInContacts) {\n    //   alert(`${name} is already in contacts.`);\n    //   return;\n    // }\n    dispatch(signupUser({ name, email, password }));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handlerFormSubmit}\n    >\n      <FormContact autoComplete=\"off\">\n        <FormInputLabel htmlFor={nameID}>Name</FormInputLabel>\n        <FormInput type=\"name\" name=\"name\" id={nameID} />\n        <ErrMessage name=\"name\" component=\"div\" />\n\n        <FormInputLabel htmlFor={emailID}>Email</FormInputLabel>\n        <FormInput type=\"email\" name=\"email\" id={emailID} />\n        <ErrMessage name=\"email\" component=\"div\" />\n\n        <FormInputLabel htmlFor={passwordID}>Password</FormInputLabel>\n        <FormInput\n          type=\"password\"\n          name=\"password\"\n          id={passwordID}\n          autoComplete=\"false\"\n        />\n        <ErrMessage name=\"password\" component=\"div\" />\n\n        <SubmitButton type=\"submit\">Register</SubmitButton>\n      </FormContact>\n    </Formik>\n  );\n};\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default RegisterForm;","import RegisterForm from \"components/RegisterForm/RegisterForm\";\n\nconst Register = () => { \n  return (\n    <RegisterForm/>\n  )\n}\n\nexport default Register;"],"names":["FormContact","styled","Form","FormInput","Field","FormInputLabel","ErrMessage","ErrorMessage","SubmitButton","nameID","nanoid","emailID","passwordID","dispatch","useDispatch","validationSchema","yup","shape","name","matches","required","email","password","min","initialValues","onSubmit","actions","signupUser","resetForm","autoComplete","htmlFor","type","id","component"],"sourceRoot":""}